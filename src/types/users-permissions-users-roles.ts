/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import type {
  DeleteUsersPermissionsRolesRole200,
  GetUsersPermissionsPermissions200,
  GetUsersPermissionsRoles200,
  GetUsersPermissionsRolesId200,
  PostUsers201,
  PostUsersBody,
  PostUsersPermissionsRoles200,
  PutUsersId200,
  PutUsersIdBody,
  PutUsersPermissionsRolesRole200,
  UsersPermissionsRoleRequestBody,
  UsersPermissionsUser
} from './generated.schemas'
import { customInstance } from '../api/orval/custom-instance';
import type { BodyType } from '../api/orval/custom-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * @summary Get default generated permissions
 */
export const getUsersPermissionsPermissions = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUsersPermissionsPermissions200>(
      {url: `/users-permissions/permissions`, method: 'GET'
    },
      options);
    }
  /**
 * @summary List roles
 */
export const getUsersPermissionsRoles = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUsersPermissionsRoles200>(
      {url: `/users-permissions/roles`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a role
 */
export const postUsersPermissionsRoles = (
    usersPermissionsRoleRequestBody: BodyType<UsersPermissionsRoleRequestBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostUsersPermissionsRoles200>(
      {url: `/users-permissions/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: usersPermissionsRoleRequestBody
    },
      options);
    }
  /**
 * @summary Get a role
 */
export const getUsersPermissionsRolesId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GetUsersPermissionsRolesId200>(
      {url: `/users-permissions/roles/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update a role
 */
export const putUsersPermissionsRolesRole = (
    role: string,
    usersPermissionsRoleRequestBody: BodyType<UsersPermissionsRoleRequestBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutUsersPermissionsRolesRole200>(
      {url: `/users-permissions/roles/${role}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: usersPermissionsRoleRequestBody
    },
      options);
    }
  /**
 * @summary Delete a role
 */
export const deleteUsersPermissionsRolesRole = (
    role: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DeleteUsersPermissionsRolesRole200>(
      {url: `/users-permissions/roles/${role}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get list of users
 */
export const getUsers = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UsersPermissionsUser[]>(
      {url: `/users`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Create a user
 */
export const postUsers = (
    postUsersBody: BodyType<PostUsersBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PostUsers201>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postUsersBody
    },
      options);
    }
  /**
 * @summary Get a user
 */
export const getUsersId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UsersPermissionsUser>(
      {url: `/users/${id}`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Update a user
 */
export const putUsersId = (
    id: string,
    putUsersIdBody: BodyType<PutUsersIdBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PutUsersId200>(
      {url: `/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putUsersIdBody
    },
      options);
    }
  /**
 * @summary Delete a user
 */
export const deleteUsersId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UsersPermissionsUser>(
      {url: `/users/${id}`, method: 'DELETE'
    },
      options);
    }
  /**
 * @summary Get authenticated user info
 */
export const getUsersMe = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UsersPermissionsUser>(
      {url: `/users/me`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Get user count
 */
export const getUsersCount = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<number>(
      {url: `/users/count`, method: 'GET'
    },
      options);
    }
  export type GetUsersPermissionsPermissionsResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>>
export type GetUsersPermissionsRolesResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsRoles>>>
export type PostUsersPermissionsRolesResult = NonNullable<Awaited<ReturnType<typeof postUsersPermissionsRoles>>>
export type GetUsersPermissionsRolesIdResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>>
export type PutUsersPermissionsRolesRoleResult = NonNullable<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>>
export type DeleteUsersPermissionsRolesRoleResult = NonNullable<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>>
export type GetUsersResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type PostUsersResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
export type GetUsersIdResult = NonNullable<Awaited<ReturnType<typeof getUsersId>>>
export type PutUsersIdResult = NonNullable<Awaited<ReturnType<typeof putUsersId>>>
export type DeleteUsersIdResult = NonNullable<Awaited<ReturnType<typeof deleteUsersId>>>
export type GetUsersMeResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersCountResult = NonNullable<Awaited<ReturnType<typeof getUsersCount>>>
