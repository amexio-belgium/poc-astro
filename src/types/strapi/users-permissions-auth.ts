/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import type {
  Error,
  GetAuthEmailConfirmationParams,
  PostAuthChangePasswordBody,
  PostAuthForgotPassword200,
  PostAuthForgotPasswordBody,
  PostAuthLocalBody,
  PostAuthLocalRegisterBody,
  PostAuthResetPasswordBody,
  PostAuthSendEmailConfirmation200,
  PostAuthSendEmailConfirmationBody,
  UsersPermissionsUserRegistration
} from './generated.schemas'
import { strapiInstance } from '../../api/orval/strapi-instance';
import type { BodyType } from '../../api/orval/strapi-instance';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * Redirects to provider login before being redirect to /auth/{provider}/callback
 * @summary Login with a provider
 */
export const getConnectProvider = (
    provider: string,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<Error>(
      {url: `/connect/${provider}`, method: 'GET'
    },
      options);
    }
  /**
 * Returns a jwt token and user info
 * @summary Local login
 */
export const postAuthLocal = (
    postAuthLocalBody: BodyType<PostAuthLocalBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<UsersPermissionsUserRegistration>(
      {url: `/auth/local`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthLocalBody
    },
      options);
    }
  /**
 * Returns a jwt token and user info
 * @summary Register a user
 */
export const postAuthLocalRegister = (
    postAuthLocalRegisterBody: BodyType<PostAuthLocalRegisterBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<UsersPermissionsUserRegistration>(
      {url: `/auth/local/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthLocalRegisterBody
    },
      options);
    }
  /**
 * @summary Default Callback from provider auth
 */
export const getAuthProviderCallback = (
    provider: string,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<UsersPermissionsUserRegistration>(
      {url: `/auth/${provider}/callback`, method: 'GET'
    },
      options);
    }
  /**
 * @summary Send rest password email
 */
export const postAuthForgotPassword = (
    postAuthForgotPasswordBody: BodyType<PostAuthForgotPasswordBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<PostAuthForgotPassword200>(
      {url: `/auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthForgotPasswordBody
    },
      options);
    }
  /**
 * @summary Rest user password
 */
export const postAuthResetPassword = (
    postAuthResetPasswordBody: BodyType<PostAuthResetPasswordBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<UsersPermissionsUserRegistration>(
      {url: `/auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthResetPasswordBody
    },
      options);
    }
  /**
 * @summary Update user's own password
 */
export const postAuthChangePassword = (
    postAuthChangePasswordBody: BodyType<PostAuthChangePasswordBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<UsersPermissionsUserRegistration>(
      {url: `/auth/change-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthChangePasswordBody
    },
      options);
    }
  /**
 * @summary Confirm user email
 */
export const getAuthEmailConfirmation = (
    params?: GetAuthEmailConfirmationParams,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<Error>(
      {url: `/auth/email-confirmation`, method: 'GET',
        params
    },
      options);
    }
  /**
 * @summary Send confirmation email
 */
export const postAuthSendEmailConfirmation = (
    postAuthSendEmailConfirmationBody: BodyType<PostAuthSendEmailConfirmationBody>,
 options?: SecondParameter<typeof strapiInstance>,) => {
      return strapiInstance<PostAuthSendEmailConfirmation200>(
      {url: `/auth/send-email-confirmation`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthSendEmailConfirmationBody
    },
      options);
    }
  export type GetConnectProviderResult = NonNullable<Awaited<ReturnType<typeof getConnectProvider>>>
export type PostAuthLocalResult = NonNullable<Awaited<ReturnType<typeof postAuthLocal>>>
export type PostAuthLocalRegisterResult = NonNullable<Awaited<ReturnType<typeof postAuthLocalRegister>>>
export type GetAuthProviderCallbackResult = NonNullable<Awaited<ReturnType<typeof getAuthProviderCallback>>>
export type PostAuthForgotPasswordResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
export type PostAuthResetPasswordResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
export type PostAuthChangePasswordResult = NonNullable<Awaited<ReturnType<typeof postAuthChangePassword>>>
export type GetAuthEmailConfirmationResult = NonNullable<Awaited<ReturnType<typeof getAuthEmailConfirmation>>>
export type PostAuthSendEmailConfirmationResult = NonNullable<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>>
